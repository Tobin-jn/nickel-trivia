{"version":3,"sources":["images/nickel.png","images/NickelJar.png","reducers/index.js","reducers/categoryReducer.js","reducers/questionsReducer.js","reducers/questionReducer.js","reducers/gameReducer.js","reducers/errorReducer.js","serviceWorker.js","components/Home/index.js","actions/index.js","containers/Question/index.js","apiCalls/helper.js","apiCalls/apiCalls.js","containers/Categories/index.js","containers/TriviaGame/index.js","containers/DailyQuestion/index.js","components/App/index.js","index.js"],"names":["module","exports","__webpack_require__","p","rootReducer","combineReducers","category","state","arguments","length","undefined","action","type","questions","generalKnowledge","geography","history","animals","vehicles","cartoons","filter","question","asked","updatedCategory","map","id","currentQuestion","answers","Object","objectSpread","game","questionCount","score","hasErrored","Boolean","window","location","hostname","match","Home","react_default","a","createElement","className","src","require","alt","NavLink","to","Component","updateQuestions","toggleAsked","updateCurrentQuestion","bool","Question","_Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkAnswer","_ref","asyncToGenerator","regenerator_default","mark","_callee","index","_this$props","addPoints","wrap","_context","prev","next","props","correct_answer","setState","correct","setTimeout","removeAlert","stop","_x","apply","answerMessage","inherits","createClass","key","value","answerAlert","_this2","pathname","onClick","connect","dispatch","categories","amount","cleanQuestions","counter","results","shuffled","questionChoices","Math","floor","random","element","shuffleAnswers","toConsumableArray","incorrect_answers","concat","cleanedShuffled","cleanAnswers","cleanedQuestion","cleanQuestion","answer","replace","generateQuestion","round","getQuestions","currentCategory","categoryId","url","response","data","fetch","sent","ok","Error","code","json","abrupt","Categories","_getPrototypeOf2","_len","args","Array","_key","handleClick","handleCategory","addQuestionCount","getTriviaQuestions","_this$props2","newQuestion","triviaQuestions","_newQuestion","checkState","nextQuestion","t0","_this$props3","generateNewQuestion","name","updateCategory","TriviaGame","gameCount","containers_Categories","containers_Question","DailyQuestion","App","Switch","Route","exact","path","component","Redirect","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","render","es","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab68531f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nickel.1c30a146.png\";","module.exports = __webpack_public_path__ + \"static/media/NickelJar.46a668fd.png\";","import { combineReducers } from \"redux\";\nimport { categoryReducer } from \"./categoryReducer\";\nimport { questionsReducer } from \"./questionsReducer\";\nimport { questionReducer } from \"./questionReducer\";\nimport { gameReducer } from \"./gameReducer\";\nimport { errorReducer } from \"./errorReducer\";\n\n\nconst rootReducer = combineReducers({\n  category: categoryReducer,\n  questions: questionsReducer,\n  currentQuestion: questionReducer,\n  game: gameReducer,\n  hasErrored: errorReducer,\n});\n\nexport default rootReducer;","export const categoryReducer = (state = '', action) => {\n  switch(action.type) {\n    case 'UPDATE_CATEGORY':\n      return action.category;\n    case \"CLEAR_CATEGORY\":\n      state.category = ''\n      return state.category\n    default:\n      return state;\n  }\n};\n\n","export const questionsReducer = (state = {\n    generalKnowledge: [],\n    geography: [],\n    history: [],\n    animals: [],\n    vehicles: [],\n    cartoons: [],\n  }, action) => {\n  switch (action.type) {\n    case \"UPDATE_QUESTIONS\":\n      state[action.category] = action.questions.filter( question => !question.asked)\n      return state\n\n    case \"TOGGLE_ASKED\":\n      const updatedCategory = state[action.category].map( question => {\n        if(question.id === action.question.id) {\n          question.asked = true\n          return question\n        } else {\n          return question\n        }\n      })\n      state[action.category] = updatedCategory\n      return state\n\n    default:\n      return state\n  }\n}\n\n\n","export const questionReducer = (state = {\n    answers: [ '', '', '', ''],\n    question: 'Loading...',\n    category:'General Knowledge'\n  }, action) => {\n  switch(action.type) {\n    case \"UPDATE_CURRENT_QUESTION\":\n      return { ...action.question, asked: true }\n    // case 'CLEAR_CURRENT_QUESTION':\n    //   state.currentQuestion = {\n    //     answers: [ '', '', '', ''],\n    //     question: 'question',\n    //     category:'General Knowledge'\n    //   }\n    //   return state\n    default:\n      return state\n  }\n}\n","export const gameReducer = (state = {\n  questionCount: 0,\n  score: 0\n}, action) => {\n  switch(action.type){\n    case 'ADD_QUESTION_COUNT':\n      return {questionCount: state.questionCount += 1, score: state.score}\n    case 'ADD_POINTS':\n      return {questionCount: state.questionCount, score: state.score += 5}\n    default:\n      return state\n  }\n}","export const errorReducer = (state = false, action) => {\n  switch(action.type) {\n    case 'HAS_ERRORED':\n      return action.hasErrored\n    default:\n      return state\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom';\nimport './Home.css'\n\nclass Home extends Component {\n  render() {\n    return(\n      <div className='landing-page'>\n        <h1 className=\"title\">Welcome to <span className='trivia-text'>Nickel Trivia!</span></h1>\n        <img className='nickel-logo' src={ require('../../images/nickel.png') } alt=\"Nickel Jar Logo\" />\n        <div className=\"btn-container\">\n          <NavLink  to='/dailyquestion'>\n            <button className='daily-trivia-btn btn'>Trivia of the Day</button>\n          </NavLink>\n          <NavLink  to='/triviagame'>\n            <button className='trivia-game-btn btn'>Trivia Game</button>\n          </NavLink>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","export const updateCategory = category => ({\n  type: \"UPDATE_CATEGORY\",\n  category\n})\n\nexport const updateQuestions = (category, questions) => ({\n  type: \"UPDATE_QUESTIONS\",\n  category,\n  questions\n})\n\nexport const toggleAsked = (category, question) => ({\n  type: \"TOGGLE_ASKED\",\n  category,\n  question\n})\n\nexport const updateCurrentQuestion = (question) => ({\n  type: \"UPDATE_CURRENT_QUESTION\",\n  question\n})\n\nexport const addQuestionCount = () => ({\n  type: \"ADD_QUESTION_COUNT\",\n})\n\nexport const addPoints = () => ({\n  type: \"ADD_POINTS\",\n})\n  \nexport const hasErrored = (bool) => ({\n   type: 'HAS_ERRORED',\n   hasErrored: bool\n})\n","import React, { Component } from 'react';\nimport './Question.css';\nimport PropTypes from \"prop-types\";\nimport { connect } from 'react-redux';\nimport { addPoints } from '../../actions';\n\nexport class Question extends Component {\n  constructor() {\n    super()\n    this.state = {\n      answerMessage: '',\n      correct: 'no answer'\n    }\n  }\n\n  checkAnswer = async (index) => {\n    const { currentQuestion, addPoints } = this.props\n    if(currentQuestion.answers[index] === currentQuestion.correct_answer){\n      this.setState({ correct: 'correct' })\n      addPoints()\n    } else {\n      this.setState({ correct: 'incorrect' })\n    }\n    await setTimeout(this.removeAlert, 3500)\n  }\n\n  removeAlert = () => {\n    this.setState({ correct: 'no answer' })\n  }\n\n  render() {\n    const { currentQuestion } = this.props\n    let answerAlert;\n\n    if(this.state.correct === 'correct' && window.location.pathname === '/triviagame'){\n      answerAlert = \n        <div className='answer-response'>\n          <p className='answer-text' ><span className='correct' >Correct Answer!!</span> Choose a category for your next question.</p>\n          <img className='nickel-logo-answer' src={ require('../../images/nickel.png') } alt=\"Nickel Jar Logo\" />\n        </div>\n    } else if (this.state.correct === 'incorrect' && window.location.pathname === '/triviagame'){\n      answerAlert = \n        <div className=\"answer-response\">\n          <p className='answer-text' >Sorry, the correct answer was {currentQuestion.correct_answer}. Choose a category for your next question.</p>\n        </div>\n    } else if (this.state.correct === 'correct' && window.location.pathname === '/dailyquestion'){\n      answerAlert = \n        <div className='answer-response daily-answer-response'>\n          <p className='answer-text' ><span className='correct' >Correct Answer!!</span> Start a game with your grandkids!</p>\n          <img className='nickel-logo-answer' src={ require('../../images/nickel.png') } alt=\"Nickel Jar Logo\" />\n        </div>\n    } else if(this.state.correct === 'incorrect' && window.location.pathname === '/dailyquestion'){\n      answerAlert = \n        <div className=\"answer-response daily-answer-response\">\n          <p className='answer-text' >Sorry, the correct answer was {currentQuestion.correct_answer}. Play a game with your grandkids!</p>\n        </div>\n    } else {\n      answerAlert = <div className=\"daily-answer-response answer-response-hidden\"></div>\n    }\n\n\n    if(!currentQuestion.question){\n      return (\n        <div className=\"eror-question\">\n          <h1 className=\"error-question-message\">Oops... no more questions, please choose another category.</h1>\n        </div>\n      )\n    } else if (this.props.hasErrored) {\n        return (\n          <h1 className=\"error-question-message\">Game Error</h1>\n        )\n    } else {\n      return (\n        <div>\n          <div className='question-container'>\n            <div className='question-container-after'></div>\n            <h3 className=\"question\">{currentQuestion.question} </h3>\n          </div>\n          <div className=\"answer-container\">\n            <div onClick={()=>{this.checkAnswer(0)}} ><p className=\"answer-choice choice-a\">{currentQuestion.answers[0]}</p></div>\n            <div onClick={()=>{this.checkAnswer(1)}} ><p className=\"answer-choice choice-b\">{currentQuestion.answers[1]}</p></div>\n            <div onClick={()=>{this.checkAnswer(2)}} ><p className=\"answer-choice choice-c\">{currentQuestion.answers[2]}</p></div>\n            <div onClick={()=>{this.checkAnswer(3)}} ><p className=\"answer-choice choice-d\">{currentQuestion.answers[3]}</p></div>\n          </div>\n          {answerAlert}\n        </div>\n      );\n    }\n  }\n}\n\nexport const mapStateToProps = state => ({\n  category: state.category,\n  questions: state.questions,\n  currentQuestion: state.currentQuestion\n});\n\nexport const mapDispatchToProps = dispatch => ({\n  addPoints: () => dispatch(addPoints())\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Question);\n\nQuestion.propTypes = {\n  category: PropTypes.string.isRequired,\n  currentQuestion: PropTypes.object.isRequired,\n  addPoints: PropTypes.func.isRequired,\n};","export const categories = {\n  generalKnowledge: { amount: 50, category: 9},\n  geography: { amount: 50, category: 22},\n  history: { amount: 40, category: 23},\n  cartoons: { amount: 18, category: 32 },\n  animals: { amount: 9, category: 27},\n  vehicles: { amount: 17, category: 28}\n}\n\n\nexport const shuffleAnswers = (questionChoices) => {\n  let counter = questionChoices.length;\n\n  while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n\n      let element = questionChoices[counter];\n      questionChoices[counter] = questionChoices[index];\n      questionChoices[index] = element;\n  }\n  return questionChoices;\n}\n\nexport const cleanQuestions = (questions) => {\n  let counter = 0\n  return questions.results.map( question => {\n    const answers = [...question.incorrect_answers, question.correct_answer]\n    const shuffled = shuffleAnswers(answers)\n    const cleanedShuffled = cleanAnswers(shuffled)\n    const cleanedQuestion = cleanQuestion(question.question)\n    counter++\n    return  {\n      category: question.category,\n      question: cleanedQuestion,\n      answers: cleanedShuffled,\n      correct_answer: question.correct_answer,\n      id: counter,\n      asked: false,\n    }\n  })\n}\n\nexport const cleanAnswers = (answers) => {\n  return answers.map( answer => {\n    return answer.replace(/&quot;/g,'\"')\n            .replace(/&#039;/g,\"'\")\n            .replace(/&amp;/g, '&')\n            .replace(/&aldquo;/g, '\"')\n            .replace(/&ardquo;/g, '\"')\n            .replace(/&hellip;/g, '...')\n            .replace(/&hellip;/g, \"'\")\n            .replace(/&shy;/g, \"-\")\n  })\n}\n\nexport const cleanQuestion = (question) => {\n  return question.replace(/&quot;/g,'\"')\n          .replace(/&#039;/g,\"'\")\n          .replace(/&amp;/g, '&')\n          .replace(/&aldquo;/g, '\"')\n          .replace(/&ardquo;/g, '\"')\n          .replace(/&hellip;/g, '...')\n          .replace(/&hellip;/g, \"'\")\n          .replace(/&shy;/g, \"-\")\n}\n\nexport const generateQuestion = (category, questions) => {\n  const length = questions.length\n  const randomInt = Math.round(Math.random() * (length - 0));\n  return questions[randomInt]\n}\n","// import * as category from './helper';\nimport { cleanQuestions, categories } from './helper';\n\nexport const getQuestions =  async (currentCategory) => {\n  let amount = categories[currentCategory].amount\n  let categoryId =  categories[currentCategory].category\n  let url = `https://opentdb.com/api.php?amount=${amount}&category=${categoryId}&difficulty=easy&type=multiple`\n\n  const response = await fetch(url)\n  if(!response.ok) throw new Error(`Status was not ok: Code ${response.code}`)\n  const data = await response.json()\n  return cleanQuestions(data)\n}\n","import React, { Component } from 'react'\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport { \n  updateCategory, \n  updateQuestions, \n  updateCurrentQuestion, \n  addQuestionCount,\n  toggleAsked,\n  hasErrored,\n} from '../../actions'\nimport './Categories.css';\nimport { getQuestions } from '../../apiCalls/apiCalls'\nimport { generateQuestion } from '../../apiCalls/helper'\n\nexport class Categories extends Component {\n\n  handleClick = (category) => {\n    const { hasErrored, handleCategory, addQuestionCount } = this.props\n\n    hasErrored(false)\n    handleCategory(category)\n    this.getTriviaQuestions(category)\n    addQuestionCount()\n  }\n\n  getTriviaQuestions = async (category) => {\n    const { questions, updateQuestions, hasErrored } = this.props\n\n    if(!this.checkState(category)) {\n      const newQuestion = generateQuestion(category, questions[category])\n      this.nextQuestion(newQuestion, category, questions[category])\n      return\n    } \n\n    try {\n      const triviaQuestions = await getQuestions(category)\n\n      updateQuestions(category, triviaQuestions)\n      const newQuestion = generateQuestion(category, triviaQuestions)\n      this.nextQuestion(newQuestion, category, triviaQuestions)\n    } \n    catch(error) {\n      hasErrored(true)\n    }\n  }\n\n  checkState = (category) => {\n    return this.props.questions[category].length === 0 ? true : false\n  }\n\n  nextQuestion = (newQuestion, category, questions) => {\n    const { generateNewQuestion, toggleAsked, updateQuestions } = this.props\n    if (questions) {\n      generateNewQuestion(newQuestion)\n      toggleAsked(category, newQuestion)\n      updateQuestions(category, questions)\n    } \n  }\n\n  render() {\n      return (\n        <div className='categories-container'>\n\n          <div className=\"categories\">\n            <button \n              className=\"category generalKnowledge\"\n              name='generalKnowledge'\n              onClick={()=> {this.handleClick('generalKnowledge')}}\n              >General Store\n            </button>\n            <button \n              className=\"category geography\"\n              name='geography'\n              onClick={()=> {this.handleClick('geography')}}\n              >Where in the World\n            </button>\n            <button \n              className=\"category history\"\n              name='history'\n              onClick={()=> {this.handleClick('history')}}\n              >When I was a kid...\n            </button>\n            <button \n              className=\"category animals\"\n              name='animals'\n              onClick={()=> {this.handleClick('animals')}}\n              >Lions, Tigers, & Bears\n            </button>\n            <button \n              className=\"category vehicles\"\n              name='vehicles'\n              onClick={()=> {this.handleClick('vehicles')}}\n              >Planes, Trains & Automobiles\n            </button>\n            <button \n              className=\"category cartoons\"\n              name='cartoons'\n              onClick={()=> {this.handleClick('cartoons')}}\n              >Your Grandkid's Favorite Movie\n            </button>\n          </div>\n        </div>\n      );\n    \n  }\n}\n\nexport const mapStateToProps = state => ({\n  questions: state.questions,\n  category: state.category\n});\n\nexport const mapDispatchToProps = dispatch => ({\n  handleCategory: (category) => \n    dispatch(updateCategory(category)),\n  updateQuestions: (category, questions) => \n    dispatch(updateQuestions(category, questions)),\n  generateNewQuestion: (question) => \n    dispatch(updateCurrentQuestion(question)),\n  addQuestionCount: () => \n    dispatch(addQuestionCount()),\n  toggleAsked: (category, question) => \n    dispatch(toggleAsked(category, question)),\n  hasErrored: (bool) =>\n    dispatch(hasErrored(bool)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Categories);\n\n\nCategories.propTypes = {\n  category: PropTypes.string.isRequired,\n  questions: PropTypes.object.isRequired,\n  handleCategory: PropTypes.func.isRequired,\n  updateQuestions: PropTypes.func.isRequired,\n  generateNewQuestion: PropTypes.func.isRequired,\n  addQuestionCount: PropTypes.func.isRequired,\n  toggleAsked: PropTypes.func.isRequired,\n  hasErrored: PropTypes.func.isRequired,\n};\n\n\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport './TriviaGame.css';\nimport Question from '../Question'\nimport Categories from '../Categories'\n\nexport class TriviaGame extends Component{\n\n  render() {\n    if (this.props.gameCount === 0) {\n      return (\n        <div className='game'>\n\n          <div className='header-container'>\n            <h2 className='choose-text'>Choose a Category</h2>\n            <h1 className='game-header'>Nickel Trivia</h1>\n            <h2 className=\"score-text\">Score {this.props.score} &cent;</h2>\n          </div>\n\n          <div className=\"game-wrapper\">\n            <Categories />\n\n            <div className='question-container'>\n              <div className='question-container-after'></div>\n              <h3 className=\"question\">Choose a category and lets start a Game!</h3>\n            </div>\n\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className='game'>\n          <div className='header-container'>\n            <h2 className='choose-text'>Choose a Category</h2>\n            <h1 className='game-header'>Nickel Trivia</h1>\n            <h2 className=\"score-text\">Score {this.props.score} &cent;</h2>\n          </div>\n\n          <div className=\"game-wrapper\">\n            <Categories />\n            <Question />\n          </div> \n        </div>\n      );\n    }\n  }\n}\n\nexport const mapStateToProps = state => ({\n  currentQuestion: state.currentQuestion,\n  gameCount: state.game.questionCount,\n  score: state.game.score\n});\n\nexport default connect(\n  mapStateToProps\n)(TriviaGame);\n\nTriviaGame.propTypes = {\n  currentQuestion: PropTypes.object.isRequired,\n  gameCount: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n};","import React, { Component } from 'react'\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport './DailyQuestion.css'\nimport Question from '../Question'\nimport { updateQuestions, updateCurrentQuestion, toggleAsked, hasErrored } from '../../actions'\nimport { getQuestions } from '../../apiCalls/apiCalls'\nimport { generateQuestion } from '../../apiCalls/helper'\nimport { NavLink } from 'react-router-dom'\n\nexport class DailyQuestion extends Component {\n\n  componentDidMount() {\n    this.getTriviaQuestions('generalKnowledge')\n  }\n\n  getTriviaQuestions = async (category) => {\n    const { updateQuestions, hasErrored } = this.props\n    hasErrored(false)\n    \n    try {\n      const triviaQuestions = await getQuestions(category)\n\n      updateQuestions(category, triviaQuestions)\n      const newQuestion = generateQuestion(category, triviaQuestions)\n      this.nextQuestion(newQuestion, category, triviaQuestions)\n    } \n    catch(error) {\n      hasErrored(true)\n    }\n  }\n\n  checkState = (category) => {\n    return this.props.questions[category].length === 0 ? true : false\n  }\n\n  nextQuestion = (newQuestion, category, questions) => {\n    const { generateNewQuestion, toggleAsked, updateQuestions } = this.props\n    generateNewQuestion(newQuestion)\n    toggleAsked(category, newQuestion)\n    updateQuestions(category, questions)\n  }\n\n  render() {\n    return (\n      <div className='daily-container'>\n        <div className=\"header-wrapper\">\n          <img className='jar-logo' src={ require('../../images/NickelJar.png') } alt=\"Trivia Jar Logo\"/>\n          <h1 className='daily-header'>Question of the Day</h1>\n          <NavLink  to='/triviagame'>\n            <button className='play-game-btn btn'>Play a game with Grandkids!</button>\n          </NavLink>\n        </div>\n        <Question />\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = state => ({\n  category: state.category,\n  questions: state.questions,\n  currentQuestion: state.currentQuestion\n});\n\nexport const mapDispatchToProps = dispatch => ({\n  updateQuestions: (category, questions) => \n    dispatch(updateQuestions(category, questions)),\n  generateNewQuestion: (category, question) => \n    dispatch(updateCurrentQuestion(category, question)),\n  toggleAsked: (category, question) => \n    dispatch(toggleAsked(category, question)),\n  hasErrored: (bool) =>\n      dispatch(hasErrored(bool)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DailyQuestion);\n\nDailyQuestion.propTypes = {\n  category: PropTypes.string.isRequired,\n  questions: PropTypes.object.isRequired,\n  currentQuestion: PropTypes.object.isRequired,\n  updateQuestions: PropTypes.func.isRequired,\n  generateNewQuestion: PropTypes.func.isRequired,\n  toggleAsked: PropTypes.func.isRequired,\n  hasErrored: PropTypes.func.isRequired,\n};","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport Home from '../Home'\nimport TriviaGame from '../../containers/TriviaGame';\nimport DailyQuestion from '../../containers/DailyQuestion';\nimport './App.css';\n\nconst App = props => {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={ Home } />\n        <Route exact path='/dailyquestion' component={ DailyQuestion } />\n        <Route exact path='/triviagame' component={ TriviaGame } />\n        <Redirect to='/' />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","import './index.css';\nimport React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"../src/reducers\";\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nconst devTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(rootReducer, devTools);\n\nrender(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>, \n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}