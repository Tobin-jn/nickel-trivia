// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TriviaGame should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TriviaGame
    currentQuestion={
      Object {
        "answers": Array [],
        "asked": false,
        "category": "Geography",
        "correct_answer": "Washington D.C",
        "id": 1,
        "question": "Which city is the capital of the United States of America?",
      }
    }
    gameCount={1}
    score={5}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Game!
        </h1>,
        <Connect(Categories) />,
        <Connect(Question) />,
        <div
          className="score"
        >
          <h1
            className="score-text"
          >
            Score:
          </h1>
          <h4
            className="score-number"
          >
            5
          </h4>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Game!",
        },
        "ref": null,
        "rendered": "Game!",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="score-text"
            >
              Score:
            </h1>,
            <h4
              className="score-number"
            >
              5
            </h4>,
          ],
          "className": "score",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Score:",
              "className": "score-text",
            },
            "ref": null,
            "rendered": "Score:",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": 5,
              "className": "score-number",
            },
            "ref": null,
            "rendered": 5,
            "type": "h4",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Game!
          </h1>,
          <Connect(Categories) />,
          <Connect(Question) />,
          <div
            className="score"
          >
            <h1
              className="score-text"
            >
              Score:
            </h1>
            <h4
              className="score-number"
            >
              5
            </h4>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Game!",
          },
          "ref": null,
          "rendered": "Game!",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1
                className="score-text"
              >
                Score:
              </h1>,
              <h4
                className="score-number"
              >
                5
              </h4>,
            ],
            "className": "score",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Score:",
                "className": "score-text",
              },
              "ref": null,
              "rendered": "Score:",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": 5,
                "className": "score-number",
              },
              "ref": null,
              "rendered": 5,
              "type": "h4",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
